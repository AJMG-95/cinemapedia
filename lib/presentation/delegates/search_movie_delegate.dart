import 'dart:async';

import 'package:cinemapedia/config/helpers/human_formats.dart';
import 'package:flutter/material.dart';
import 'package:animate_do/animate_do.dart';
import 'package:cinemapedia/domain/entities/movie.dart';

//* Definici칩n de un tipo de funci칩n para la b칰squeda de pel칤culas.
//? Este `typedef` define un callback que recibe un `String` (el query de b칰squeda)
//? y devuelve un `Future<List<Movie>>`, lo que permite implementar diferentes estrategias
//? de b칰squeda en distintas partes de la aplicaci칩n.
typedef SearchMovieCallback = Future<List<Movie>> Function(String query);

//! Clase que extiende `SearchDelegate` para la b칰squeda de pel칤culas en la aplicaci칩n.
class SearchMovieDelegate extends SearchDelegate<Movie?> {
  /*
    Para que realmente este SearchMovieDelegate funcione para buscar pel칤culas
    hay que definir una funci칩n para buscar pel칤culas. Para ello,
    hay que definir un tipo de funci칩n espec칤fica con typedef.
    Cualquier implementaci칩n que cumpla con:
    1췈 Recibir un String.
    2췈 Devolver un Future<List<Movie>>.
    ser치 v치lida.
  */
  //? Callback que se ejecutar치 para realizar la b칰squeda de pel칤culas.
  final SearchMovieCallback searchMovies;

  /*
    Debe ser un broadcast porque cada vez que el usuario escribe y se redibuja
    la lista de pel칤culas, esta se vuelve a suscribir al controlador.
    OJO: Si se sabe que solo hay un widget escuchando, se puede dejar como un StreamController normal.
    Pero si no se sabe, es mejor dejarlo como broadcast para que pueda tener m칰ltiples listeners.
  */
  //* StreamController que gestionar치 la emisi칩n de las pel칤culas encontradas en la b칰squeda.
  //? Se usa un `broadcast` para permitir m칰ltiples listeners simult치neamente.
  StreamController<List<Movie>> debounceMovies = StreamController.broadcast();

  //*StreamController que gestionar치 el icono/funci칩n del buildActions
  final StreamController<bool> _isLoadingStream = StreamController<bool>.broadcast();

  //* Temporizador (`Timer`) para manejar la espera antes de realizar la b칰squeda.
  //? Sirve para evitar m칰ltiples peticiones seguidas mientras el usuario escribe.
  Timer? _debounceTimer;
  List<Movie>? initialMovies;

  SearchMovieDelegate({
    required this.searchMovies,
    required this.initialMovies,
  }) : super(
          searchFieldLabel: 'Buscar pel칤culas',
          /* textInputAction: TextInputAction.done, */ // Esto cambia el tecto del bot칩n de busqueda en el teclado del movil.
        );

  //* Este m칠todo se ejcuta cuando se deja de usar el delegate (SearchMovieDelegate)
  //? Este m칠todo cierra por completo el stream debounceMovies
  void clearStreams() {
    debounceMovies.close();
  }

  //* M칠todo que se ejecuta cuando el usuario cambia el texto en la barra de b칰squeda.
  //? Implementa un "debounce" para evitar hacer peticiones en cada pulsaci칩n de tecla.
  void _onQueryChange(String query) {

    _isLoadingStream.add(true);

    // Si hay un temporizador en ejecuci칩n, se cancela para reiniciar la espera.
    if (_debounceTimer?.isActive ?? false) _debounceTimer!.cancel();

    // Se establece un nuevo temporizador con 500ms de espera antes de hacer la b칰squeda.
    _debounceTimer = Timer(
      const Duration(milliseconds: 500),
      () async {
        // Se realiza la b칰squeda y se emiten los resultados.
        final movies = await searchMovies(query);
        initialMovies = movies;
        debounceMovies.add(movies);
        _isLoadingStream.add(false);
      },
    );
  }

  //* Configura el texto de placeholder en la barra de b칰squeda.
  /*
  @override
  String? get searchFieldLabel => 'Buscar pel칤cula';
  */

  //! Este m칠todo evita la duplicaci칩n de c칩digo entre buildResults y buildSuggestions
  Widget _buildResultsAndSuggestions() {
    // Si el usuario no ha escrito nada, muestra un mensaje informativo.
    if (query.isEmpty) {
      return const Center(
          child: Text("Empieza a escribir para buscar pel칤culas"));
    }

    return StreamBuilder(
        initialData: initialMovies,
        stream: debounceMovies.stream,
        builder: (context, snapshot) {
          final movies = snapshot.data ?? [];

          // Si no hay pel칤culas y el query no est치 vac칤o, se muestra un mensaje.
          if (movies.isEmpty && query.isNotEmpty) {
            return const Center(
                child: Text("No hay pel칤culas que coincidan con su b칰squeda"));
          }

          // Construcci칩n de la lista de resultados de la b칰squeda.
          return ListView.builder(
              itemCount: movies.length,
              itemBuilder: (context, index) => _MovieItem(
                    movie: movies[index],
                    /*
                    Se deben pasar `context` y `movie` por las siguientes razones:
                    游늷 `context`:
                      - `context` es necesario porque `close(context, movie)` se encarga de cerrar la b칰squeda y retornar la pel칤cula seleccionada.
                      - Al ser un `SearchDelegate`, su cierre debe realizarse en el `context` actual para que la pantalla previa reciba el resultado.
                      - Sin `context`, `close()` no sabr칤a desde qu칠 punto en la jerarqu칤a de widgets debe cerrarse la b칰squeda.
                    游늷 `movie`:
                      - `movie` representa la pel칤cula seleccionada y se pasa como par치metro para devolverla como resultado de la b칰squeda.
                      - El `SearchDelegate` en Flutter permite devolver un valor cuando se cierra (en este caso, una instancia de `Movie`).
                      - Esto permite que la vista anterior (que invoc칩 la b칰squeda) obtenga la pel칤cula y pueda utilizarla, por ejemplo, para navegar a una pantalla de detalles.
                    游댳 En resumen, `context` permite cerrar el `SearchDelegate` correctamente y `movie` es el valor que se pasa como resultado al cerrar la b칰squeda.
                  */
                    onMovieSelected: (context, movie) {
                      clearStreams();
                      close(context, movie);
                    },
                  ));
        });
  }

  //* Construye las acciones de la barra de b칰squeda (ej. bot칩n de limpiar texto).
  @override
  List<Widget>? buildActions(BuildContext context) {
    return [
      StreamBuilder(
        initialData: false,
        stream: _isLoadingStream.stream,
        builder: (context, snapshot) {
          // Cuando esto es true sigminifica que est치 cargando
          if (snapshot.data ?? false) {
            if (snapshot.data == true && query.isNotEmpty) {
              return SpinPerfect(
                duration: const Duration(seconds: 10),
                spins: 10,
                infinite: true,
                child: IconButton(
                    onPressed: () => query = '',
                    icon: const Icon(Icons.refresh_rounded)),
              );
            }
          }
          return FadeIn(
            animate: query.isNotEmpty,
            duration: const Duration(microseconds: 200),
            child: IconButton(
                onPressed: () => query = '', icon: const Icon(Icons.clear)),
          );
        },
      )
    ];
  }

  //* Construye el icono a la izquierda de la barra de b칰squeda (bot칩n de retroceso).
  @override
  Widget? buildLeading(BuildContext context) {
    return IconButton(
        onPressed: () {
          clearStreams();
          close(context, null);
        },
        icon: const Icon(Icons.arrow_back_ios_new_rounded));
  }

  //* Construye los resultados de la b칰squeda cuando el usuario presiona "Enter".
  @override
  Widget buildResults(BuildContext context) {
    return _buildResultsAndSuggestions();
  }

  //* Construye las sugerencias de b칰squeda mientras el usuario escribe.
  @override
  Widget buildSuggestions(BuildContext context) {
    // Se llama a `_onQueryChange` cada vez que se actualiza la consulta.
    _onQueryChange(query);
    // Se usa un `StreamBuilder` para actualizar la lista de sugerencias en tiempo real.
    return _buildResultsAndSuggestions();
  }
}

//! Widget privado que representa un elemento individual en la lista de resultados de b칰squeda.
class _MovieItem extends StatelessWidget {
  final Movie movie;

  //* Callback que se ejecuta cuando se selecciona una pel칤cula de la lista.
  final Function onMovieSelected;

  const _MovieItem({required this.movie, required this.onMovieSelected});

  @override
  Widget build(BuildContext context) {
    final textStyles = Theme.of(context).textTheme;
    final size = MediaQuery.of(context).size;

    return GestureDetector(
      // Cuando se selecciona una pel칤cula, se cierra la b칰squeda y se devuelve el resultado.
      onTap: () {
        onMovieSelected(context, movie);
      },
      child: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 5),
        child: Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            //* Imagen del p칩ster de la pel칤cula.
            SizedBox(
              width: size.width * 0.2,
              child: ClipRRect(
                borderRadius: BorderRadius.circular(14),
                child: Image.network(
                  movie.posterPath,
                  loadingBuilder: (context, child, loadingProgress) {
                    if (loadingProgress != null) {
                      return const Padding(
                        padding: EdgeInsets.all(8.0),
                        child: Center(
                          child: CircularProgressIndicator(
                            strokeWidth: 2,
                          ),
                        ),
                      );
                    }
                    return FadeIn(child: child);
                  },
                  fit: BoxFit.cover,
                ),
              ),
            ),
            const SizedBox(width: 10),

            //* Informaci칩n textual de la pel칤cula (t칤tulo, descripci칩n, calificaci칩n).
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  //* T칤tulo de la pel칤cula (limitado a 60 caracteres para evitar desbordes).
                  (movie.title.length > 60)
                      ? Text(
                          '${movie.title.substring(0, 60)}...',
                          style: textStyles.titleLarge,
                        )
                      : Text(
                          movie.title,
                          style: textStyles.titleLarge,
                        ),

                  //* Descripci칩n de la pel칤cula (limitada a 150 caracteres).
                  (movie.overview.length > 150)
                      ? Text('${movie.overview.substring(0, 150)}...')
                      : Text(movie.overview),

                  //* Calificaci칩n de la pel칤cula con estrellas.
                  Row(
                    children: [
                      Icon(
                        Icons.star_half_rounded,
                        color: Colors.yellow.shade800,
                      ),
                      const SizedBox(width: 5),
                      Text(
                        HumanFormats.number(movie.voteAverage, 1),
                        style: textStyles.bodyMedium!.copyWith(
                          color: Colors.yellow.shade900,
                        ),
                      )
                    ],
                  )
                ],
              ),
            )
          ],
        ),
      ),
    );
  }
}
