import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:cinemapedia/presentation/providers/providers.dart';
import 'package:cinemapedia/presentation/widgets/shared/full_screen_loader.dart';
import 'package:cinemapedia/presentation/widgets/movies/movie_horizontal_listview.dart';
import 'package:cinemapedia/presentation/widgets/movies/movies_slideshow.dart';
import 'package:cinemapedia/presentation/widgets/shared/custom_appbar.dart';

///! `HomeView`: Vista principal dentro de `HomeScreen`.
///? Se encarga de gestionar la carga inicial de las pelÃ­culas.
///? Extiende `ConsumerStatefulWidget` para poder acceder a `ref` y manejar estado.
class HomeView extends ConsumerStatefulWidget {
  const HomeView({super.key});
  /*
    Al modifi la clase del estado a ConsumerState<HomeView>, este override
Â    se modifica combiertiendose en una instacia de la propias clase HomeViewState.
    State<HomeView> createState() => HomeViewState() -> HomeViewState createState() => HomeViewState();
  */
  @override
  HomeViewState createState() => HomeViewState();
}

///! `HomeViewState`: Estado de `HomeView`
///? Se encarga de inicializar la carga de datos al iniciar la vista.
///? Usa `ConsumerState` para acceder a `ref` y gestionar la carga de datos.
/*
  Al tratatarse de un ConsumerStatefulWidget el state cambia:
    State<HomeView> -> ConsumerState<HomeView>, lo que implica un cambio en el
    overre del state de la clase
 */
class HomeViewState extends ConsumerState<HomeView> {
  ///! `initState`: MÃ©todo que se ejecuta una sola vez cuando se monta el widget.
  ///? Se usa para cargar las pelÃ­culas de las distintas categorÃ­as.
  @override
  void initState() {
    super.initState();

    /*
      Dentro del initState se quiere llamar de alguna manera al notifier y desde ahÃ­
Â  Â    al mÃ©todo loadNextPage, para ello hay que llamar el ref, y para tener acceso al
Â  Â    ref es necesario que el widget sea un ConsumerWidget.
Â  Â    En este caso al ser un statefullwidget se usa la clase ConsumerStatefulWidget,
      lo que implica la modificaciÃ³n del state a un ConsumerState
    */
    //! Carga inicial de las pelÃ­culas en distintas categorÃ­as.
    //! Se usa `.read()` porque solo se necesita ejecutar la acciÃ³n sin suscribirse al estado.
    ref
        .read(nowPlayingMoviesProvider.notifier)
        .loadNextPage(); // Llama al mÃ©todo loadNextPage, haciendo la peticiÃ³n pero sin renderizar los datos. No regrasa el valor del estado sino el notifier
    ref.read(popularMoviesProvider.notifier).loadNextPage();
    ref.read(upComingMoviesProvider.notifier).loadNextPage();
    ref.read(topRatedMoviesProvider.notifier).loadNextPage();

    //! `read()` ejecuta la acciÃ³n, mientras que `watch()` se usa para observar cambios en el estado.
    /*
    Â  BÃ¡sicamente el read() llama a la siguiente pÃ¡gina y cuando se obtinene los datos
      de peliculas, estos se muestran mediante el watch.
    */
  }

  ///! `build`: MÃ©todo que renderiza la interfaz grÃ¡fica del `HomeView`.
  ///? Se encarga de mostrar la lista de pelÃ­culas organizadas por categorÃ­as.
  /*
  Â  Ahora al se un ConsumerState, a lo largo de la clase se tiene acceso al ref de
Â    manera global en todo el scope de la clase, por lo que no es necesario pasar
Â    el ref como argumento del constructor.
  */
  @override
  Widget build(BuildContext context) {
    //* ðŸ”„ Muestra una pantalla de carga si los datos aÃºn no han sido obtenidos.
    final initialLoading = ref.watch(initialLoadingProvider);
    if (initialLoading) return const FullScreenLoader();

    //! ðŸ“Œ Obtener el estado de cada provider de pelÃ­culas
    /*
      En riverpod al usar ref.watch automaticamente se obtine el valor del estado del provider.
      Se usa watch porque se necesita estar pendiente de los cambios en el estado del provider.
    */
    final nowPlayingMovies = ref.watch(nowPlayingMoviesProvider); // En cines
    final slideShowMovies = ref.watch(moviesSlideshowProvider); // Carrusel
    final popularMovies = ref.watch(popularMoviesProvider); // Populares
    final upComingMovies = ref.watch(upComingMoviesProvider); // PrÃ³ximamente
    final topRatedMovies = ref.watch(topRatedMoviesProvider); // Mejor valoradas

    //* ðŸ”¹ `CustomScrollView`: Permite aplicar `Slivers` para un scroll avanzado
    /*
      Los Slivers son son widgets de un SliverAppBar, este tipo de appnar permite
      introducir comportamientos de scroll en la appbar, como en este caso que se
      muestra/oculta el appbar
    */
    return CustomScrollView(
      slivers: [
        //! `SliverAppBar`: Barra superior con efecto flotante
        const SliverAppBar(
          floating: true,
          flexibleSpace: FlexibleSpaceBar(
            centerTitle: true,
            title: CustomAppbar(),
          ),
        ),

        //! `SliverList`: Contenido de la pantalla con las listas de pelÃ­culas
        SliverList(
          delegate: SliverChildBuilderDelegate(
            (context, index) {
              return Column(
                children: [
                  //* ðŸ”¹ Carrusel de pelÃ­culas destacadas
                  MoviesSlideshow(movies: slideShowMovies),

                  //* ðŸ”¹ Lista horizontal de pelÃ­culas en cines
                  MovieHorizontalListview(
                    movies: nowPlayingMovies,
                    title: 'En cines',
                    subTitle:
                        'Hoy: ${DateTime.now().day}/${DateTime.now().month}',
                    loadNextPage: () => ref
                        .read(nowPlayingMoviesProvider.notifier)
                        .loadNextPage(),
                  ),

                  //* ðŸ”¹ Lista horizontal de pelÃ­culas populares
                  MovieHorizontalListview(
                    movies: popularMovies,
                    title: 'Populares',
                    loadNextPage: () =>
                        ref.read(popularMoviesProvider.notifier).loadNextPage(),
                  ),

                  //* ðŸ”¹ Lista horizontal de pelÃ­culas prÃ³ximas a estrenarse
                  MovieHorizontalListview(
                    movies: upComingMovies,
                    title: 'PrÃ³ximamente',
                    loadNextPage: () => ref
                        .read(upComingMoviesProvider.notifier)
                        .loadNextPage(),
                  ),

                  //* ðŸ”¹ Lista horizontal de pelÃ­culas mejor valoradas
                  MovieHorizontalListview(
                    movies: topRatedMovies,
                    title: 'Mejor Valoradas',
                    loadNextPage: () => ref
                        .read(topRatedMoviesProvider.notifier)
                        .loadNextPage(),
                  ),

                  const SizedBox(height: 15), // Espaciado final
                ],
              );
            },
            childCount: 1, // Solo una vez, ya que es una lista Ãºnica
          ),
        ),
      ],
    );
  }
}
