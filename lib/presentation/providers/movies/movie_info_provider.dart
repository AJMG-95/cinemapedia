//* Este es el provider para la vista de detalles de las pel√≠culas.
//? Su objetivo es almacenar en cach√© las pel√≠culas que ya han sido consultadas
//? para evitar m√∫ltiples llamadas innecesarias a la API y mejorar el rendimiento.

import 'package:cinemapedia/presentation/providers/movies/movie_repository_provider.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:cinemapedia/domain/entities/movie.dart';

///! `movieInfoProvider`: Proveedor que maneja un mapa (`Map<String, Movie>`) donde
///! la clave es el ID de la pel√≠cula y el valor es la entidad `Movie`.
///? Riverpod necesita conocer el tipo de datos que manejar√° el `StateNotifier`,
///? por eso se especifica `Map<String, Movie>`.
final movieInfoProvider =
    StateNotifierProvider<MovieMapNotifier, Map<String, Movie>>((ref) {
  // Se obtiene una referencia al repositorio de pel√≠culas
  final movieRepository = ref.watch(movieRepositoryProvider);

  // Se instancia `MovieMapNotifier`, pas√°ndole como argumento el m√©todo `getMovieById`
  // del repositorio, sin ejecutarlo todav√≠a.
  return MovieMapNotifier(getMovie: movieRepository.getMovieById);
});

/*
  üìù Explicaci√≥n del almacenamiento en cach√©:
  Se crea un mapa `Map<String, Movie>` donde:
  - La clave es el `id` de la pel√≠cula.
  - El valor es la instancia de `Movie` correspondiente.

  üìå Funcionamiento:
  1Ô∏è‚É£ Cuando se solicita una pel√≠cula, primero se revisa si ya est√° almacenada en el mapa.
  2Ô∏è‚É£ Si est√° en cach√©, se devuelve sin hacer una nueva petici√≥n.
  3Ô∏è‚É£ Si no est√° en cach√©, se consulta a la API, se almacena en el mapa y luego se devuelve.

  üîπ Ejemplo de estructura del mapa en memoria:
  {
    '123': Movie(), // Pel√≠cula con ID 123 ya consultada
    '113': Movie(), // Pel√≠cula con ID 113 ya consultada
    '143': Movie(), // Pel√≠cula con ID 143 ya consultada
  }
*/

///! `GetMovieCallback`: Callback que recibe un `String` (ID de pel√≠cula)
///! y devuelve un `Future<Movie>`, permitiendo inyectar diferentes fuentes de datos.
typedef GetMovieCallback = Future<Movie> Function(String movieId);

///! `MovieMapNotifier`: Clase que gestiona el estado del `movieInfoProvider`.
///? Se encarga de almacenar y recuperar las pel√≠culas en cach√©.
class MovieMapNotifier extends StateNotifier<Map<String, Movie>> {
  // Callback para obtener una pel√≠cula por su ID.
  final GetMovieCallback getMovie;

  //* Constructor del `StateNotifier`, inicializa el estado con un mapa vac√≠o (`{}`).
  MovieMapNotifier({required this.getMovie}) : super({});

  ///! `loadMovie`: M√©todo que carga una pel√≠cula en el estado si no est√° en cach√©.
  ///? Verifica si la pel√≠cula ya est√° almacenada antes de hacer una petici√≥n a la API.
  Future<void> loadMovie(String movieId) async {
    if (state[movieId] != null) {
      return; // ‚úÖ Si la pel√≠cula ya est√° cargada, simplemente retorna sin hacer nada.
    }

    // üîÑ Se obtiene la pel√≠cula desde la API.
    final movie = await getMovie(movieId);

    // üîÑ Se actualiza el estado con una nueva instancia del mapa que incluye la nueva pel√≠cula.
    state = {...state, movieId: movie};
  }
}
